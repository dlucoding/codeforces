// Thank God!
#include <bits/stdc++.h>
#include <cstdint>
#include <numeric>
using namespace std;

// Aliases for simple data types
using ll = long long;
using dd = long double;
using mpi = map<int, int>;
using mpl = map<ll, ll>;
using ull = unsigned long long;

// Constant definitions
#define PI 3.14159265358979323
#define E 2.7182818284590
#define all(x) x.begin(), x.end()

// BIG NUMBERS (MODULAR)
const ll MOD = 998244353;
const ll MOD1 = 998244353;
const ll MOD2 = (ll)1e9 + 7;

// simplified aliases for vectors,pairs
template <class T>
using v = vector<T>;
template <class T>
using p = pair<T, T>;

// overloaded instream operators
template <class T1, class T2>
istream &operator>>(istream &in, pair<T1, T2> &p)
{
    in >> p.first >> p.second;
    return in;
}
template <class T>
istream &operator>>(istream &in, v<T> &v)
{
    for (auto &x : v)
        in >> x;
    return in;
}

// a^b mod MOD
ll POW(ll a, ll b)
{
    ll res = 1;
    ll m = a;
    while (b)
    {
        if (b & 1)
            res = (res * m) % MOD;
        m *= m;
        m %= MOD;
        b >>= 1;
    }
    return res;
}

// a^-1 mod MOD
ll INV(ll a)
{
    return POW(a, MOD - 2);
}

template <typename T>
class Printer
{
private:
    int sz;
    vector<T> a;

public:
    Printer(vector<T> &a) : a(a) {};
    Printer(vector<T> &a, int &sz) : a(a), sz(sz) {};
    void print(const vector<T> &arr)
    {
        for (auto &o : arr)
            cout << o << " ";
    }
    void print()
    {
        print(a);
    }
};

// MULTITEST TOGGLE
const bool test = true;
// INTERACTIVE TOGGLE
const bool fileInput = false;
/*-------------------------------------------------------------------------------*/
void solve()
{
    int n;
    cin >> n;
    v<int> a(n);
    cin >> a;
    // l,r
    v<int> d(n + 1);
    v<int> enter(n + 1), exit(n + 1);
    set<int> st;
    int mex = 0, mx = 0;
    for (int i = 0; i < n; i++)
    {
        mx = max(mx, a[i]);
        d[a[i]]++;
        while (mex < n && d[mex])
            mex++;
    }
    // mex can only decrease
    int sum = 0; // extras
    for (int i = 0; i < mex; i++)
    {
        enter[d[i]]++;
        exit[n - (i + 1)]++;
    }
    // mex
    enter[0]++; // mex: achieved at 0
    int out = 0;
    for (int i = 0; i <= n; i++)
    {
        out += enter[i];
        cout << out << ' ';
        out -= exit[i];
    }
    cout << '\n';
}
int main()
{
    /*Command Line
    g++ forkiespad.cpp -o forkiespad
    forkiespad.exe
    */

    // file input
    if (fileInput)
    {
        freopen("input.txt", "r", stdin);
    }
    ios::sync_with_stdio(false);
    cin.tie(0);

    // testcases
    int t;
    if (test)
    {
        cin >> t;
    }
    else
        t = 1;

    while (t--)
    {
        solve();
    }
}

/*
-try out more cases
-attack the problem creatively/at different angles
-what am i missing?
-CHECK YOUR CODE
-pay attention to BOUNDS
-errors - out of bounds, edge case(n=0, n=1?), integer overflow, etc.
-WHEN IN DOUBT, USE LONG LONG
-check the for loops
-watch out for division errors (use double and ll when needed)
*/
// Thank God!
